Student: Cao Quoc Thang Hoang
Student ID: s4759487

Lambda Calculus

Question 1: 
    Not = \a.(a (False) (True))
    = \a.(a (\x(\y.y)) (\x(\y.x)))


Question 2:
    Lambda expession for ¬(¬a ∧ ¬b) when let a = p and b = q is: NOT (NOT p AND NOT q)
    Write this expression in prefix position, we have: NOT (AND (NOT p NOT q))


    = \a.(a (False) (True)) (\a.(\b.(ab)a) (\a.(a (False) (True)) p \a.(a (False) (True)) q))
    = (a (False) (True)) [a := (\a.(\b.(ab)a) (\a.(a (False) (True)) p \a.(a (False) (True)) q))]
    = (\a.(\b.(ab)a) (\a.(a (False) (True)) p \a.(a (False) (True)) q)) (False) (True)
    = (\a.(\b.(ab)a) (\a.(a (False) (True)) p \a.(a (False) (True)) q)) (False) (True)
    = (\a.(\b.(ab)a) ((a (False) (True))[a:= p] (a (False) (True)) [a:=q])) (False) (True)
    = (\a.(\b.(ab)a) ((p (False) (True)) (q (False) (True)))) (False) (True)
    = ((\b.(ab)a) [a = (p (False) (True))] (q (False) (True))) (False) (True)
    = (\b.((p (False) (True))b)(p (False) (True)) (q (False) (True))) (False) (True)
    = (((p (False) (True))b)(p (False) (True)) [b:= (q (False) (True))] ) (False) (True)
    = (((p(False)(True)) (q(False)(True))) (p(False)(True))) (False) (True)
Let this be (1)
We also have (2):
	True True True 	
       = (\x.(\y.x)) True True 
       = x [x := True] [y := True] 
       = True
	False False False 
       = (\x.(\y.y)) False False 
       = y [x := False] [y := False] 
       = False
	False True False
       = (\x.(\y.y)) True False 
       = y [x := True] [y := False] 
       = False
	False False True
       = (\x.(\y.y)) False True 
       = y [x := False] [y := True] 
       = True
Combining (1) and (2), there are 4 cases:	

    Case 1: p = False and q = False
    (((False(False)(True)) (False(False)(True))) (False(False)(True))) (False) (True)
    = ((True) (True) (True) ) (False) (True)
    = False 

    Case 2: p = True and q = False 
    = (((True(False)(True)) (False(False)(True))) (True(False)(True))) (False) (True)
    = ((False) (True) (False)) (False) (True)
    = True

    Case 3: p = False and q = True 
    = (((False(False)(True)) (True(False)(True))) (False(False)(True))) (False) (True)
    = ((True) (False) (True)) (False) (True)
    = True

    Case 4: p = True and q = True 
    = (((True(False)(True)) (True(False)(True))) (True(False)(True))) (False) (True)
    = ((False) (False) (False)) (False) (True)
    = True

Question 3:
    = (\xy.x)(\abc.cab)z(\z.zz)
    = (\xy.x)[x:=\abc.cab]z(\z.zz)
    = (\y.(\abc.cab))z(\z.zz)
    = ((\abc.cab))[y:=z](\z.zz)
    = (\abc.cab)(\z.zz)
    = (\bc.cab)[a:=\z.zz]
    = \bc.(c(\z.zz)b)

Principle Types

(These questions are coded in file PrincipalType.hs)


Blockus


